{"version":3,"sources":["../../server/helpers/authJWT.js"],"names":["jwt","require","passport","Strategy","jwtSecret","process","env","JWT_SECRET","adminPassword","ADMIN_PASSWORD","jwtOpts","algorithm","expiresIn","use","usernameField","passwordField","email","password","cb","result","models","users","findOne","include","model","roles","user_roles","where","user_email","user_name","user_id","user_password","role","role_name","dataValues","compare","bcrypt","username","userId","userRoles","error","message","authenticate","session","module","exports","login","ensureAdmin","ensureSeller","refreshToken","req","res","next","token","sign","user","roleType","cookie","httpOnly","json","profile","success","payload","jwtString","headers","authorization","cookies","verify","isSeller","err","Error","statusCode","replace","requestToken","body","status","tokens","token_id","token_expire_date","getTime","Date","newAccessToken","id","config","secret","jwtExpiration","accessToken","send"],"mappings":"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","sourcesContent":["const jwt = require('jsonwebtoken')\nconst passport = require('passport')\nconst Strategy = require('passport-local').Strategy\n\nimport bcrypt from 'bcrypt';\n\nconst jwtSecret = process.env.JWT_SECRET || 'myjwt'\nconst adminPassword = process.env.ADMIN_PASSWORD || 'secret'\nconst jwtOpts = { algorithm: 'HS256', expiresIn: '30d' }\nimport models from '../models/init-models'\n\n//passport.use(adminStrategy())\n\npassport.use(new Strategy({\n    usernameField: 'email',\n    passwordField: 'password'\n},\n    async function (email, password, cb) {\n        try {\n            const result = await models.users.findOne({\n              include:[{include:[{model:models.roles}], model:models.user_roles}],  where: { user_email: email }\n            });\n            \n            const { user_name, user_id, user_password, user_email,user_roles:[{role:{role_name}}]} = result.dataValues;\n            const compare = await bcrypt.compare(password, user_password);\n\n            if (compare) return cb(null, { username: user_name, userId: user_id, email: user_email, userRoles: role_name})\n\n\n\n        } catch (error) {\n            return cb(null, error.message)\n        }\n\n        cb(null, false)\n    }\n))\n\nconst authenticate = passport.authenticate('local', { session: false })\n\nmodule.exports = {\n    authenticate,\n    login: login,\n    ensureAdmin: ensureAdmin,\n    ensureSeller: ensureSeller,\n    refreshToken : refreshToken\n}\n\n\n\nasync function login(req, res, next) {\n    const token = await sign({ username: req.user.username, roleType: req.user.userRoles });\n    const { userId, username, email, userRoles } = req.user;\n    res.cookie('jwt', token, { httpOnly: true })\n\n    res.json({ profile: { userId, username, email, userRoles }, success: true, token: token })\n}\n\n\nasync function sign(payload) {\n    const token = await jwt.sign(payload, jwtSecret, jwtOpts)\n    return token\n}\n\nasync function ensureSeller(req, res, next) {\n    const jwtString = req.headers.authorization || req.cookies.jwt\n    const payload = await verify(jwtString)\n    if (payload.username) {\n        req.user = payload;\n        if (req.user.roleType === 'Seller') req.isSeller = true;\n        return next();\n    }\n\n    const err = new Error('Unauthorized');\n    err.statusCode = 401;\n    next(err);\n}\n\nasync function ensureAdmin(req, res, next) {\n    const jwtString = req.headers.authorization || req.cookies.jwt\n    const payload = await verify(jwtString)\n    if (payload.username === 'admin') return next()\n    const err = new Error('Unauthorized')\n    err.statusCode = 401\n    next(err)\n}\n\nasync function verify(jwtString = '') {\n    jwtString = jwtString.replace(/^Bearer /i, '')\n    try {\n        const payload = await jwt.verify(jwtString, jwtSecret)\n        return payload\n    } catch (err) {\n        err.statusCode = 401\n        throw err\n    }\n}\n\nasync function refreshToken(req, res) {\n    const { refreshToken: requestToken } = req.body;\n\n    if (requestToken == null) {\n        return res.status(403).json({ message: \"Refresh Token is required!\" });\n    }\n\n    try {\n        const result = await models.tokens.findOne({\n            where: { token_id: refreshToken }\n        });\n\n        if (!refreshToken) {\n            res.status(403).json({ message: \"Refresh token is not in database!\" });\n            return;\n        }\n\n        if (result.token_expire_date.getTime() < new Date().getTime()) {\n            res.status(403).json({\n                message: \"Refresh token was expired. Please make a new signin request\",\n            });\n            return;\n        }\n\n        let newAccessToken = jwt.sign({ id: user.id }, config.secret, {\n            expiresIn: config.jwtExpiration,\n          });\n\n        return res.status(200).json({\n            accessToken: newAccessToken,\n            refreshToken: refreshToken.token,\n        });\n\n    } catch (error) {\n        return res.status(500).send({ message: error });\n    }\n\n\n}\n\n// function adminStrategy() {\n\n//     return new Strategy(async function (username, password, cb) {\n//         try {\n//             const result = await models.users.findOne({\n//                 where: { user_email: username }\n//             });\n\n//             const { user_name, user_id, user_password, user_email, user_role_type } = result.dataValues;\n//             const compare = await bcrypt.compare(password, user_password);\n\n//             if (compare) return cb(null, { username: user_name, userId: user_id, email: user_email, roleType: user_role_type })\n//         } catch (error) {\n//             //console.log(error);\n//             return cb(null, error)\n//         }\n\n//         cb(null, false)\n//     })\n// }"],"file":"authJWT.js"}