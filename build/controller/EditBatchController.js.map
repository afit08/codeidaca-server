{"version":3,"sources":["../../server/controller/EditBatchController.js"],"names":["findBatch","req","res","result","context","models","batch","findAll","attributes","include","model","talent_batch","as","where","taba_drop","required","talent","instructor","send","error","status","json","message","findBatchById","batch_id","params","id","UpdateBatchStatus","batch_status","body","update","returning","deleteBatch","result_taba","destroy","taba_batch_id","parseInt","sendStatus","UpdateBatch","next","batch_name","batch_technology","batch_start_date","batch_end_date","batch_inst_id","AddMembers","talent_batches","batchTabaList","map","el","dataValues","taba_tale_id","taba_drop_date","Date","includes","tale_id","create"],"mappings":"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","sourcesContent":["const findBatch = async (req, res) => {\r\n    try {\r\n        const result = await req.context.models.batch.findAll({\r\n            attributes: ['batch_id', \r\n                        'batch_name',\r\n                        'batch_technology',\r\n                        'batch_start_date',\r\n                        'batch_end_date',\r\n                        'batch_status'],\r\n            include:[\r\n                {\r\n                    model: req.context.models.talent_batch,\r\n                    as: 'talent_batches',\r\n                    attributes: [\r\n                        'taba_tale_id'\r\n                    ],\r\n                    where:{\r\n                        taba_drop: false\r\n                    },\r\n                    required:false,\r\n                    include:{\r\n                        model: req.context.models.talent,\r\n                        as: 'taba_tale',\r\n                        attributes: [\r\n                            'tale_photo'\r\n                        ],\r\n                        required:false\r\n                    }\r\n                },\r\n                {\r\n                    model: req.context.models.instructor,\r\n                    as: 'batch_inst',\r\n                    attributes: [\r\n                        'inst_id',\r\n                        'inst_name'\r\n                    ],\r\n                    required:false\r\n                }\r\n            ]\r\n        });\r\n        return res.send(result)\r\n    } catch (error) {\r\n        res.status(404).json({message : error.message})\r\n    }\r\n}\r\n\r\nconst findBatchById = async (req, res) => {\r\n    try {\r\n        const result = await req.context.models.batch.findAll({\r\n            attributes: ['batch_id', \r\n                        'batch_name',\r\n                        'batch_technology',\r\n                        'batch_start_date',\r\n                        'batch_end_date',\r\n                        'batch_status'],\r\n            where:{batch_id: req.params.id},\r\n            include:[\r\n                {\r\n                    model: req.context.models.talent_batch,\r\n                    as: 'talent_batches',\r\n                    attributes: [\r\n                        'taba_tale_id'\r\n                    ],\r\n                    where:{\r\n                        taba_drop: false\r\n                    },\r\n                    required:false,\r\n                    include:{\r\n                        model: req.context.models.talent,\r\n                        as: 'taba_tale',\r\n                        attributes: [\r\n                            'tale_photo'\r\n                        ],\r\n                        required:false\r\n                    }\r\n                },\r\n                {\r\n                    model: req.context.models.instructor,\r\n                    as: 'batch_inst',\r\n                    attributes: [\r\n                        'inst_id',\r\n                        'inst_name'\r\n                    ],\r\n                    required:false\r\n                }\r\n            ]\r\n        });\r\n        return res.send(result)\r\n    } catch (error) {\r\n        res.status(404).json({message : error.message})\r\n    }\r\n}\r\n\r\nconst UpdateBatchStatus = async (req, res) => {\r\n    const { batch_status } = req.body;\r\n    try{\r\n        const result = await req.context.models.batch.update(\r\n            { \r\n                batch_status: batch_status\r\n            },\r\n            {\r\n                returning: true,\r\n                where: { batch_id: req.params.id }\r\n            }\r\n        );\r\n        return res.send(result);\r\n    }catch (error) {\r\n        res.status(404).json({message : error.message})\r\n    }\r\n}\r\n\r\nconst deleteBatch = async (req, res) => {\r\n    const id = req.params.id;\r\n    try {\r\n        const result_taba = await req.context.models.talent_batch.destroy({\r\n            where: { taba_batch_id: parseInt(id) }\r\n        });\r\n        const result = await req.context.models.batch.destroy({\r\n            where: { batch_id: parseInt(id) }\r\n        });\r\n        return res.send(\"delete \" + result + \" rows.\")\r\n    } catch (error) {\r\n        return res.sendStatus(404).send(\"Data not found.\")\r\n    }\r\n}\r\n\r\nconst UpdateBatch = async (req, res, next) => {\r\n    const {batch_name, batch_technology, batch_start_date, batch_end_date, batch_inst_id} = req.body;\r\n    try{\r\n        const result = await req.context.models.batch.update(\r\n            { \r\n                batch_name: batch_name,\r\n                batch_technology: batch_technology,\r\n                batch_start_date: batch_start_date,\r\n                batch_end_date: batch_end_date,\r\n                batch_inst_id: batch_inst_id\r\n            },\r\n            {\r\n                returning: true,\r\n                where: { batch_id: parseInt(req.params.id) }\r\n            }\r\n        );\r\n        next()\r\n    }catch (error) {\r\n        res.status(404).json({message : error.message})\r\n    }\r\n}\r\n\r\nconst AddMembers = async (req, res) => {\r\n    const {talent_batches} = req.body;\r\n    const batch = req.params.id\r\n    try{\r\n        const batchTabaList = await req.context.models.talent_batch.findAll({\r\n            attributes: ['taba_tale_id'],\r\n            where: {taba_batch_id: parseInt(batch)},\r\n        }).map(el=>el.dataValues.taba_tale_id)\r\n\r\n        await req.context.models.talent_batch.update(\r\n            {\r\n                taba_drop: true,\r\n                taba_drop_date: new Date()\r\n            },\r\n            {\r\n                returning: true,\r\n                where: { \r\n                    taba_batch_id: parseInt(batch)\r\n                }\r\n            }\r\n        )\r\n\r\n        await talent_batches.map(el=>{\r\n            if(batchTabaList.includes(el.tale_id)){\r\n                req.context.models.talent_batch.update(\r\n                    {\r\n                        taba_drop: false,\r\n                        taba_drop_date: null\r\n                    },\r\n                    {\r\n                        returning: true,\r\n                        where: { \r\n                            taba_batch_id: parseInt(batch),\r\n                            taba_tale_id: parseInt(el.tale_id),\r\n                        }\r\n                    }\r\n                )\r\n            }else{\r\n                req.context.models.talent_batch.create(\r\n                    {\r\n                        taba_drop: false,\r\n                        taba_tale_id: el.tale_id,\r\n                        taba_batch_id: parseInt(batch)\r\n                    }\r\n                )\r\n            }\r\n        })      \r\n        return res.send(\"Update Batch Succeed\");\r\n    }catch (error) {\r\n        res.status(404).json({message : error.message})\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default{\r\n    findBatch,\r\n    findBatchById,\r\n    UpdateBatchStatus,\r\n    deleteBatch,\r\n    UpdateBatch,\r\n    AddMembers\r\n}"],"file":"EditBatchController.js"}