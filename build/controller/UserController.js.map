{"version":3,"sources":["../../server/controller/UserController.js"],"names":["SALT_ROUND","signup","req","res","username","email","password","handphone","body","hashPassword","bcrypt","hash","result","context","models","users","create","user_name","user_email","user_password","user_handphone","user_roles","usro_role_id","dataValues","send","error","status","json","message","signin","findOne","where","compare","sendStatus"],"mappings":";;;;;;;AAAA;;;;AACA,MAAMA,UAAU,GAAG,EAAnB;;AAEA,MAAMC,MAAM,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA;AAA7B,MAA2CL,GAAG,CAACM,IAArD;AAEA,MAAIC,YAAY,GAAGH,QAAnB;AACAG,EAAAA,YAAY,GAAG,MAAMC,gBAAOC,IAAP,CAAYF,YAAZ,EAA0BT,UAA1B,CAArB;;AACA,MAAI;AACF,UAAMY,MAAM,GAAG,MAAMV,GAAG,CAACW,OAAJ,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,MAAzB,CAAgC;AACnDC,MAAAA,SAAS,EAAEb,QADwC;AAEnDc,MAAAA,UAAU,EAAEb,KAFuC;AAGnDc,MAAAA,aAAa,EAAEV,YAHoC;AAInDW,MAAAA,cAAc,EAAEb,SAJmC;AAKnDc,MAAAA,UAAU,EAAE;AACVC,QAAAA,YAAY,EAAE;AADJ;AALuC,KAAhC,CAArB;AASA,UAAM;AAAEL,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA4BN,MAAM,CAACW,UAAzC;AACApB,IAAAA,GAAG,CAACqB,IAAJ,CAAS;AAAEP,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAT;AACD,GAZD,CAYE,OAAOO,KAAP,EAAc;AACdtB,IAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAAK,CAACG,OAA3B;AACD;AACF,CApBD,C,CAsBA;;;AACA,MAAMC,MAAM,GAAG,OAAO3B,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBJ,GAAG,CAACM,IAAhC;;AAEA,MAAI;AACF,UAAMI,MAAM,GAAG,MAAMV,GAAG,CAACW,OAAJ,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBe,OAAzB,CAAiC;AACpDC,MAAAA,KAAK,EAAE;AAAEb,QAAAA,UAAU,EAAEb;AAAd;AAD6C,KAAjC,CAArB;AAGA,UAAM;AAAEY,MAAAA,SAAF;AAAaC,MAAAA,UAAb;AAAyBC,MAAAA;AAAzB,QAA2CP,MAAM,CAACW,UAAxD;AACA,UAAMS,OAAO,GAAG,MAAMtB,gBAAOsB,OAAP,CAAe1B,QAAf,EAAyBa,aAAzB,CAAtB;;AACA,QAAIa,OAAJ,EAAa;AACX,aAAO7B,GAAG,CAACqB,IAAJ,CAAS;AAAEP,QAAAA,SAAF;AAAaC,QAAAA;AAAb,OAAT,CAAP;AACD,KAFD,MAEO;AACL,aAAOf,GAAG,CAAC8B,UAAJ,CAAe,GAAf,CAAP;AACD;AACF,GAXD,CAWE,OAAOR,KAAP,EAAc;AACd,WAAOtB,GAAG,CAAC8B,UAAJ,CAAe,GAAf,CAAP;AACD;AACF,CAjBD;;eAmBe;AACbhC,EAAAA,MADa;AAEb4B,EAAAA;AAFa,C","sourcesContent":["import bcrypt from \"bcrypt\";\nconst SALT_ROUND = 10;\n\nconst signup = async (req, res) => {\n  const { username, email, password, handphone } = req.body;\n\n  let hashPassword = password;\n  hashPassword = await bcrypt.hash(hashPassword, SALT_ROUND);\n  try {\n    const result = await req.context.models.users.create({\n      user_name: username,\n      user_email: email,\n      user_password: hashPassword,\n      user_handphone: handphone,\n      user_roles: {\n        usro_role_id: 5,\n      },\n    });\n    const { user_name, user_email } = result.dataValues;\n    res.send({ user_name, user_email });\n  } catch (error) {\n    res.status(404).json(error.message);\n  }\n};\n\n// use sigin with token in authJWT\nconst signin = async (req, res) => {\n  const { email, password } = req.body;\n\n  try {\n    const result = await req.context.models.users.findOne({\n      where: { user_email: email },\n    });\n    const { user_name, user_email, user_password } = result.dataValues;\n    const compare = await bcrypt.compare(password, user_password);\n    if (compare) {\n      return res.send({ user_name, user_email });\n    } else {\n      return res.sendStatus(404);\n    }\n  } catch (error) {\n    return res.sendStatus(404);\n  }\n};\n\nexport default {\n  signup,\n  signin,\n};\n"],"file":"UserController.js"}